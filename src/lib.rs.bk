use std::time::Duration;

use std::fmt::{Display, Formatter, Result};

/// The number of nanoseconds in a microsecond.
const NANOS_PER_MICRO: u32 = 1000;
/// The number of nanoseconds in a millisecond.
const NANOS_PER_MILLI: u32 = 1000_000;
/// The number of nanoseconds in seconds.
const NANOS_PER_SEC: u32 = 1_000_000_000;
/// The number of microseconds per second.
const MICROS_PER_SEC: u64 = 1000_000;
/// The number of milliseconds per second.
const MILLIS_PER_SEC: u64 = 1000;
/// The number of seconds in a minute.
const SECS_PER_MINUTE: u64 = 60;
/// The number of seconds in an hour.
const SECS_PER_HOUR: u64 = 3600;
/// The number of (non-leap) seconds in days.
const SECS_PER_DAY: u64 = 86400;
/// The number of (non-leap) seconds in a week.
const SECS_PER_WEEK: u64 = 604800;

pub struct Durado {
    duration: Duration,
}

impl Durado {
    pub fn new(duration: Duration) -> Durado {
        Durado { duration: duration }
    }
}

impl Display for Durado {
    fn fmt(&self, f: &mut Formatter) -> Result {

        if self.duration.as_secs() == 0 {

        } else {
        let weeks = self.duration.as_secs() / SECS_PER_WEEK;
        let days = (self.duration.as_secs() - (weeks * SECS_PER_WEEK)) / SECS_PER_DAY ;
        let hours = (self.duration.as_secs() -  (days * SECS_PER_DAY)) / SECS_PER_HOUR;
        let minutes = (self.duration.as_secs() - (hours * SECS_PER_HOUR)) / SECS_PER_MINUTE;
        let seconds = (self.duration.as_secs() - (minutes * SECS_PER_MINUTE));

        try!(write!(f, "{}w", weeks));
        try!(write!(f, "{}d", days));
        try!(write!(f, "{}h", hours));
        try!(write!(f, "{}m", minutes));
    }
        Ok(())
    }
}
